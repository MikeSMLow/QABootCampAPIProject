{
	"info": {
		"_postman_id": "bce0e03b-7492-405b-af27-6791cfd8e8b0",
		"name": "QA BootCamp Todoist Collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Projects",
			"item": [
				{
					"name": "Get All Projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Validate the Content-Type header value', function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"pm.test('First project shown should be Inbox', function () {",
									"    pm.expect(jsonData[0]).to.have.property('name').eql('Inbox');",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{bearerToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{prodURL}}/rest/v1/projects",
							"host": [
								"{{prodURL}}"
							],
							"path": [
								"rest",
								"v1",
								"projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create New Project",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set('projectName', 'Postman Test Project');",
									"pm.environment.set('projectColor', 36);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Project has been created with the specified name', function () {",
									"    pm.expect(jsonData.name).to.eql(pm.environment.get('projectName'));",
									"});",
									"",
									"pm.environment.unset('projectName');",
									"pm.environment.set('projectId',jsonData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{bearerToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"{{projectName}}\",\n    \"color\":{{projectColor}}\n}"
						},
						"url": {
							"raw": "{{prodURL}}/rest/v1/projects",
							"host": [
								"{{prodURL}}"
							],
							"path": [
								"rest",
								"v1",
								"projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Correct Project id is returned', function () {",
									"    pm.expect(jsonData.id).to.eql(pm.environment.get('projectId'));",
									"});",
									"",
									"pm.test('Project color is green', function () {",
									"    pm.expect(jsonData.color).to.eql(parseInt(pm.environment.get('projectColor')));",
									"});",
									"",
									"pm.environment.unset('projectColor');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{bearerToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{prodURL}}/rest/v1/projects/{{projectId}}",
							"host": [
								"{{prodURL}}"
							],
							"path": [
								"rest",
								"v1",
								"projects",
								"{{projectId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Project",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set('projectColor', 43);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"Status message is No Content\", function () {",
									"    pm.response.to.have.status('No Content');",
									"});",
									"",
									"pm.environment.unset('projectColor');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{bearerToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"color\":{{projectColor}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{prodURL}}/rest/v1/projects/{{projectId}}",
							"host": [
								"{{prodURL}}"
							],
							"path": [
								"rest",
								"v1",
								"projects",
								"{{projectId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Project",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"Status message is No Content\", function () {",
									"    pm.response.to.have.status('No Content');",
									"});",
									"",
									"pm.environment.unset('projectId');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{bearerToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{prodURL}}/rest/v1/projects/{{projectId}}",
							"host": [
								"{{prodURL}}"
							],
							"path": [
								"rest",
								"v1",
								"projects",
								"{{projectId}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Tasks",
			"item": [
				{
					"name": "Get All Tasks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Validate Content-Type header is present', function () {",
									"    pm.response.to.have.header('Content-Type');",
									"});",
									"",
									"pm.test('Validate Content-Type header value', function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{bearerToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{prodURL}}/rest/v1/tasks",
							"host": [
								"{{prodURL}}"
							],
							"path": [
								"rest",
								"v1",
								"tasks"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create New Project",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set('projectName', 'Tasks Testing Project');"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Project has been created with the specified name', function () {",
									"    pm.expect(jsonData.name).to.eql(pm.environment.get('projectName'));",
									"});",
									"",
									"pm.environment.unset('projectName');",
									"pm.environment.set('projectId',jsonData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{bearerToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\":\"{{projectName}}\"\n}"
						},
						"url": {
							"raw": "{{prodURL}}/rest/v1/projects",
							"host": [
								"{{prodURL}}"
							],
							"path": [
								"rest",
								"v1",
								"projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create New Task",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set('taskContent', 'Buy Milk');"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Task has been created with the specified content', function () {",
									"    pm.expect(jsonData.content).to.eql(pm.environment.get('taskContent'));",
									"});",
									"",
									"pm.environment.set('taskId',jsonData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{bearerToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"content\": \"{{taskContent}}\",\n    \"description\": \"At the store\",\n    \"project_id\": {{projectId}}\n}"
						},
						"url": {
							"raw": "{{prodURL}}/rest/v1/tasks",
							"host": [
								"{{prodURL}}"
							],
							"path": [
								"rest",
								"v1",
								"tasks"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Requested task has the correct id in body', function () {",
									"    pm.expect(jsonData.id).to.eql(pm.environment.get('taskId'));",
									"});",
									"",
									"pm.test('Requested task has the expected content in body', function () {",
									"    pm.expect(jsonData.content).to.eql(pm.environment.get('taskContent'));",
									"});",
									"",
									"pm.environment.unset('taskContent');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{bearerToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{prodURL}}/rest/v1/tasks/{{taskId}}",
							"host": [
								"{{prodURL}}"
							],
							"path": [
								"rest",
								"v1",
								"tasks",
								"{{taskId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Task",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set('taskContent', 'Buy Milk and Eggs');"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"Status message is No Content\", function () {",
									"    pm.response.to.have.status('No Content');",
									"});",
									"",
									"pm.environment.unset('taskContent');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{bearerToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"content\":\"{{taskContent}}\"\n}"
						},
						"url": {
							"raw": "{{prodURL}}/rest/v1/tasks/{{taskId}}",
							"host": [
								"{{prodURL}}"
							],
							"path": [
								"rest",
								"v1",
								"tasks",
								"{{taskId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Close Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"Status message is No Content\", function () {",
									"    pm.response.to.have.status('No Content');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{bearerToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{prodURL}}/rest/v1/tasks/{{taskId}}/close",
							"host": [
								"{{prodURL}}"
							],
							"path": [
								"rest",
								"v1",
								"tasks",
								"{{taskId}}",
								"close"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reopen Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"Status message is No Content\", function () {",
									"    pm.response.to.have.status('No Content');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{bearerToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{prodURL}}/rest/v1/tasks/{{taskId}}/reopen",
							"host": [
								"{{prodURL}}"
							],
							"path": [
								"rest",
								"v1",
								"tasks",
								"{{taskId}}",
								"reopen"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"Status message is No Content\", function () {",
									"    pm.response.to.have.status('No Content');",
									"});",
									"",
									"pm.environment.unset('taskId');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{bearerToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{prodURL}}/rest/v1/tasks/{{taskId}}",
							"host": [
								"{{prodURL}}"
							],
							"path": [
								"rest",
								"v1",
								"tasks",
								"{{taskId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Project",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.test(\"Status message is No Content\", function () {",
									"    pm.response.to.have.status('No Content');",
									"});",
									"",
									"pm.environment.unset('projectId');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{bearerToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{prodURL}}/rest/v1/projects/{{projectId}}",
							"host": [
								"{{prodURL}}"
							],
							"path": [
								"rest",
								"v1",
								"projects",
								"{{projectId}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Negative Projects Scenarios",
			"item": [
				{
					"name": "Get All Projects - Invalid authentication token",
					"item": [
						{
							"name": "Get All Projects",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 401 for Unauthorized', function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test('Verify response is Forbidden', function () {",
											"    pm.expect(pm.response.text()).to.include('Forbidden');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer AAA",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{prodURL}}/rest/v1/projects",
									"host": [
										"{{prodURL}}"
									],
									"path": [
										"rest",
										"v1",
										"projects"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Create New Project - Invalid body content",
					"item": [
						{
							"name": "Create New Project",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400 for Bad Request\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test('Verify response contains Something went Wrong', function () {",
											"    pm.expect(pm.response.text()).to.include('Sorry, something went wrong');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{bearerToken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Invalid Color Format\",\n    \"color\": 36,\n}"
								},
								"url": {
									"raw": "{{prodURL}}/rest/v1/projects",
									"host": [
										"{{prodURL}}"
									],
									"path": [
										"rest",
										"v1",
										"projects"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get Project - Nonexistent project id",
					"item": [
						{
							"name": "Get Project",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404 for Not Found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test('Verify response contains Not Found', function () {",
											"    pm.expect(pm.response.text()).to.include('Not found');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{bearerToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{prodURL}}/rest/v1/projects/nonexistentid",
									"host": [
										"{{prodURL}}"
									],
									"path": [
										"rest",
										"v1",
										"projects",
										"nonexistentid"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update Project - Invalid property sent",
					"item": [
						{
							"name": "Create New Project",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set('projectName', 'Invalid Update Project');"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Project has been created with the specified name', function () {",
											"    pm.expect(jsonData.name).to.eql(pm.environment.get('projectName'));",
											"});",
											"",
											"pm.environment.unset('projectName');",
											"pm.environment.set('projectId',jsonData.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{bearerToken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\":\"{{projectName}}\"\n}"
								},
								"url": {
									"raw": "{{prodURL}}/rest/v1/projects",
									"host": [
										"{{prodURL}}"
									],
									"path": [
										"rest",
										"v1",
										"projects"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Project",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500 for Internal Server Error\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Response contains Internal Server Error\", function () {",
											"    pm.response.to.have.status('Internal Server Error');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{bearerToken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"invalid\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{prodURL}}/rest/v1/projects/{{projectId}}",
									"host": [
										"{{prodURL}}"
									],
									"path": [
										"rest",
										"v1",
										"projects",
										"{{projectId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Project",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"pm.test(\"Status message is No Content\", function () {",
											"    pm.response.to.have.status('No Content');",
											"});",
											"",
											"pm.environment.unset('projectId');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{bearerToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{prodURL}}/rest/v1/projects/{{projectId}}",
									"host": [
										"{{prodURL}}"
									],
									"path": [
										"rest",
										"v1",
										"projects",
										"{{projectId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete Project - Nonexistent project id",
					"item": [
						{
							"name": "Delete Project",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500 for Internal Server Error\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(\"Response contains Internal Server Error\", function () {",
											"    pm.response.to.have.status('Internal Server Error');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{bearerToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{prodURL}}/rest/v1/projects/nonexistentprojectid",
									"host": [
										"{{prodURL}}"
									],
									"path": [
										"rest",
										"v1",
										"projects",
										"nonexistentprojectid"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Negative Tasks Scenarios",
			"item": [
				{
					"name": "Get All Tasks - Missing authentication header",
					"item": [
						{
							"name": "Get All Tasks",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 400 for Bad Request', function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test('Verify response contains Empty token', function () {",
											"    pm.expect(pm.response.text()).to.include('Empty token');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{prodURL}}/rest/v1/tasks",
									"host": [
										"{{prodURL}}"
									],
									"path": [
										"rest",
										"v1",
										"tasks"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Create New Task - Text body instead of json",
					"item": [
						{
							"name": "Create New Task",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400 for Bad Request\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test('Verify response contains Bad Request', function () {",
											"    pm.expect(pm.response.text()).to.include('Bad Request');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{bearerToken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "not a json",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{prodURL}}/rest/v1/tasks",
									"host": [
										"{{prodURL}}"
									],
									"path": [
										"rest",
										"v1",
										"tasks"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get Task - Nonexistent task id",
					"item": [
						{
							"name": "Get Task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404 for Not found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test('Verify response contains 404 page not found message', function () {",
											"    pm.expect(pm.response.text()).to.include('404 page not found');",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{bearerToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{prodURL}}/rest/v1/tasks/nonexistentid",
									"host": [
										"{{prodURL}}"
									],
									"path": [
										"rest",
										"v1",
										"tasks",
										"nonexistentid"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update Task - Invalid body format",
					"item": [
						{
							"name": "Create New Task",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set('taskContent', 'Buy Milk');"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Task has been created with the specified content', function () {",
											"    pm.expect(jsonData.content).to.eql(pm.environment.get('taskContent'));",
											"});",
											"",
											"pm.environment.set('taskId',jsonData.id);",
											"pm.environment.unset('taskContent');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{bearerToken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"content\": \"{{taskContent}}\",\n    \"description\": \"At the store\"\n}"
								},
								"url": {
									"raw": "{{prodURL}}/rest/v1/tasks",
									"host": [
										"{{prodURL}}"
									],
									"path": [
										"rest",
										"v1",
										"tasks"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Task",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400 for Bad Request\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Body contains Bad Request message\", function () {",
											"    pm.expect(pm.response.text()).to.include('Bad Request');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{bearerToken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"content\":\"New Content\"\",\n}"
								},
								"url": {
									"raw": "{{prodURL}}/rest/v1/tasks/{{taskId}}",
									"host": [
										"{{prodURL}}"
									],
									"path": [
										"rest",
										"v1",
										"tasks",
										"{{taskId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"pm.test(\"Status message is No Content\", function () {",
											"    pm.response.to.have.status('No Content');",
											"});",
											"",
											"pm.environment.unset('taskId');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{bearerToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{prodURL}}/rest/v1/tasks/{{taskId}}",
									"host": [
										"{{prodURL}}"
									],
									"path": [
										"rest",
										"v1",
										"tasks",
										"{{taskId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Close Task - Close already closed task",
					"item": [
						{
							"name": "Create New Task",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set('taskContent', 'Buy Milk');"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Task has been created with the specified content', function () {",
											"    pm.expect(jsonData.content).to.eql(pm.environment.get('taskContent'));",
											"});",
											"",
											"pm.environment.set('taskId',jsonData.id);",
											"pm.environment.unset('taskContent');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{bearerToken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"content\": \"{{taskContent}}\",\n    \"description\": \"At the store\"\n}"
								},
								"url": {
									"raw": "{{prodURL}}/rest/v1/tasks",
									"host": [
										"{{prodURL}}"
									],
									"path": [
										"rest",
										"v1",
										"tasks"
									]
								}
							},
							"response": []
						},
						{
							"name": "Close Task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"pm.test(\"Status message is No Content\", function () {",
											"    pm.response.to.have.status('No Content');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{bearerToken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{prodURL}}/rest/v1/tasks/{{taskId}}/close",
									"host": [
										"{{prodURL}}"
									],
									"path": [
										"rest",
										"v1",
										"tasks",
										"{{taskId}}",
										"close"
									]
								}
							},
							"response": []
						},
						{
							"name": "Close Closed Task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Todoist has no validations in place for this scenario, in this case we only verify the application continues working as expected.",
											"",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"pm.test(\"Status message is No Content\", function () {",
											"    pm.response.to.have.status('No Content');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{bearerToken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{prodURL}}/rest/v1/tasks/{{taskId}}/close",
									"host": [
										"{{prodURL}}"
									],
									"path": [
										"rest",
										"v1",
										"tasks",
										"{{taskId}}",
										"close"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"pm.test(\"Status message is No Content\", function () {",
											"    pm.response.to.have.status('No Content');",
											"});",
											"",
											"pm.environment.unset('taskId');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{bearerToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{prodURL}}/rest/v1/tasks/{{taskId}}",
									"host": [
										"{{prodURL}}"
									],
									"path": [
										"rest",
										"v1",
										"tasks",
										"{{taskId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Reopen Task - Invalid authentication header",
					"item": [
						{
							"name": "Create New Task",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set('taskContent', 'Buy Milk');"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Task has been created with the specified content', function () {",
											"    pm.expect(jsonData.content).to.eql(pm.environment.get('taskContent'));",
											"});",
											"",
											"pm.environment.set('taskId',jsonData.id);",
											"pm.environment.unset('taskContent');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{bearerToken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"content\": \"{{taskContent}}\",\n    \"description\": \"At the store\"\n}"
								},
								"url": {
									"raw": "{{prodURL}}/rest/v1/tasks",
									"host": [
										"{{prodURL}}"
									],
									"path": [
										"rest",
										"v1",
										"tasks"
									]
								}
							},
							"response": []
						},
						{
							"name": "Close Task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"pm.test(\"Status message is No Content\", function () {",
											"    pm.response.to.have.status('No Content');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{bearerToken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{prodURL}}/rest/v1/tasks/{{taskId}}/close",
									"host": [
										"{{prodURL}}"
									],
									"path": [
										"rest",
										"v1",
										"tasks",
										"{{taskId}}",
										"close"
									]
								}
							},
							"response": []
						},
						{
							"name": "Reopen Task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403 for Forbidden\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Body contains Forbidden message\", function () {",
											"    pm.expect(pm.response.text()).to.include('Forbidden');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer 88899989",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{prodURL}}/rest/v1/tasks/{{taskId}}/reopen",
									"host": [
										"{{prodURL}}"
									],
									"path": [
										"rest",
										"v1",
										"tasks",
										"{{taskId}}",
										"reopen"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Task",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"pm.test(\"Status message is No Content\", function () {",
											"    pm.response.to.have.status('No Content');",
											"});",
											"",
											"pm.environment.unset('taskId');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{bearerToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{prodURL}}/rest/v1/tasks/{{taskId}}",
									"host": [
										"{{prodURL}}"
									],
									"path": [
										"rest",
										"v1",
										"tasks",
										"{{taskId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete Task - Invalid body sent",
					"item": [
						{
							"name": "Create New Task Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set('taskContent', 'Buy Milk')"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Task has been created with the specified content', function () {",
											"    pm.expect(jsonData.content).to.eql(pm.environment.get('taskContent'));",
											"});",
											"",
											"pm.environment.set('taskId',jsonData.id);",
											"pm.environment.unset('taskContent');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{bearerToken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"content\": \"{{taskContent}}\",\n    \"description\": \"At the store\"\n}"
								},
								"url": {
									"raw": "{{prodURL}}/rest/v1/tasks",
									"host": [
										"{{prodURL}}"
									],
									"path": [
										"rest",
										"v1",
										"tasks"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Task Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//This API is set to ignore whatever content is sent as Body, so the expected results should be as if no body was sent at all.",
											"",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"pm.test(\"Status message is No Content\", function () {",
											"    pm.response.to.have.status('No Content');",
											"});",
											"",
											"pm.environment.unset('taskId');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{bearerToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"content\":\"This is invalid\",,-\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{prodURL}}/rest/v1/tasks/{{taskId}}",
									"host": [
										"{{prodURL}}"
									],
									"path": [
										"rest",
										"v1",
										"tasks",
										"{{taskId}}"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});"
						]
					}
				}
			]
		}
	]
}